#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Servo.h>

#define MAX_SCORE 15 

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Knock sensor
#define KNOCK_PIN 2

// Servo
#define SERVO_PIN 6

// Reset Button
#define RESET_PIN 4


// Declaration for SSD1306 display connected using software SPI (default case):
#define OLED_MOSI   9
#define OLED_CLK   10
#define OLED_DC    11
#define OLED_CS    12
#define OLED_RESET 13
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
  OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);


enum servoPositions {
  SERVO_TOP= 115, 
  SERVO_LEFT = 168, 
  SERVO_RIGHT = 70 
};


Servo myservo;  
int pos = SERVO_TOP;    // variable to store the servo position
int servoDirection = 0;

int score = 0;

const unsigned char PROGMEM powPic [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x70, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xfc, 0x80, 0x70, 0x00, 0x66, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xfe, 0x00, 0x90, 0x83, 0x1e, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xff, 0x03, 0x38, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0b, 0xff, 0x8c, 0xf8, 0xe3, 0xfc, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x13, 0xff, 0xf1, 0xfe, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x00, 0x00, 0x70, 0x37, 0xff, 0xe3, 0xfc, 0xff, 0xfc, 0x10, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xdf, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe6, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x10, 0x00, 0x00, 0xbe, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x04, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x3f, 0x00, 0x01, 0x3f, 0x9f, 0xff, 0xf8, 0x0f, 0xd3, 0xfc, 0x04, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x37, 0x9b, 0x63, 0x7f, 0xf8, 0x01, 0xf8, 0x0f, 0x80, 0xf8, 0x0f, 0xff, 0x00, 0x00, 
0x00, 0x00, 0x1f, 0xe4, 0xfe, 0x7f, 0xe0, 0x00, 0xf8, 0x1f, 0x80, 0xf8, 0x1f, 0x60, 0x60, 0x00, 
0x00, 0x00, 0x1b, 0xff, 0xec, 0xff, 0x80, 0x00, 0x30, 0x1f, 0x80, 0xf0, 0x1f, 0xc0, 0xc0, 0x00, 
0x00, 0x00, 0x63, 0xff, 0xff, 0xff, 0x00, 0x00, 0x70, 0x1f, 0x00, 0xf0, 0x3f, 0x80, 0xc0, 0x00, 
0x00, 0x00, 0x2f, 0xff, 0xc1, 0xfe, 0x00, 0x00, 0xf0, 0x1f, 0x00, 0xe0, 0x3f, 0x01, 0x80, 0x00, 
0x00, 0x00, 0x1f, 0xf8, 0x00, 0x7c, 0x00, 0x00, 0x70, 0x1e, 0x00, 0xe0, 0x7f, 0x02, 0x00, 0x00, 
0x00, 0x00, 0x0f, 0xc0, 0x00, 0x38, 0x00, 0x00, 0x70, 0x1c, 0x00, 0xc0, 0x7e, 0x04, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x30, 0x07, 0x80, 0x30, 0x1c, 0x00, 0xc0, 0xfc, 0x0c, 0x00, 0x00, 
0x00, 0x00, 0x10, 0x00, 0x00, 0x20, 0x1f, 0xc0, 0x30, 0x18, 0x00, 0x80, 0xf8, 0x18, 0x00, 0x00, 
0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x3f, 0xc0, 0x30, 0x10, 0x01, 0x81, 0xf8, 0x30, 0x00, 0x00, 
0x00, 0x00, 0x30, 0x0f, 0xf0, 0x20, 0x3f, 0xe0, 0x20, 0x10, 0x01, 0x03, 0xf0, 0x20, 0x00, 0x00, 
0x00, 0x00, 0x30, 0x07, 0xf0, 0x40, 0x7f, 0xe0, 0x20, 0x20, 0x00, 0x03, 0xe0, 0x60, 0x00, 0x00, 
0x00, 0x00, 0x78, 0x07, 0xf0, 0x40, 0x7f, 0xe0, 0x20, 0x00, 0x00, 0x07, 0xe0, 0xe0, 0x00, 0x00, 
0x00, 0x00, 0x1e, 0x07, 0xf0, 0x40, 0x7f, 0xc0, 0x60, 0x00, 0x80, 0x07, 0xe1, 0xe0, 0x00, 0x00, 
0x00, 0x00, 0x1e, 0x07, 0xe0, 0x40, 0x7f, 0xc0, 0x60, 0x01, 0x80, 0x0f, 0xff, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0a, 0x03, 0xc0, 0xc0, 0x7f, 0x80, 0xe0, 0x01, 0x00, 0x0f, 0x86, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x03, 0x03, 0x81, 0xc0, 0x7f, 0x01, 0xe0, 0x03, 0x00, 0x1e, 0x06, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x03, 0x02, 0x03, 0xc0, 0x3e, 0x03, 0xe0, 0x07, 0x00, 0x3c, 0x06, 0x00, 0x00, 0x00, 
0x00, 0x01, 0x03, 0x00, 0x07, 0xc0, 0x00, 0x07, 0xe0, 0x07, 0x80, 0x3c, 0x08, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0d, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x0f, 0x8f, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x19, 0x00, 0x3f, 0xe0, 0x00, 0x1f, 0xe0, 0x1f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x33, 0x00, 0x7f, 0xf0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x27, 0x01, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x4f, 0x81, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x24, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xff, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x81, 0xbf, 0xff, 0xff, 0xff, 0xff, 0x80, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x81, 0xbf, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x81, 0xbf, 0xe2, 0x7f, 0xff, 0xfe, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x43, 0xbe, 0x02, 0xfe, 0x3f, 0xfe, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x4c, 0x70, 0x02, 0x7c, 0x0f, 0xfc, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x60, 0x00, 0x07, 0x78, 0x03, 0xf8, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x40, 0x03, 0x78, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x70, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


const unsigned char PROGMEM winnerPic [] = {
// 'winner', 128x64px
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x78, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x70, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xe6, 0x78, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x1c, 0xe7, 0x3e, 0x7b, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x03, 0x9c, 0xf7, 0x3e, 0x7b, 0x80, 0x07, 0x80, 0x00, 0x03, 0xc0, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x33, 0xcc, 0xff, 0x3c, 0x39, 0xc0, 0x03, 0x80, 0x00, 0x03, 0xc0, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x39, 0xce, 0xff, 0x3c, 0x39, 0xc0, 0x03, 0x80, 0x00, 0x03, 0xc0, 0x00, 0x00, 
0x00, 0x00, 0x07, 0x39, 0xee, 0x7f, 0x9c, 0x3d, 0xc0, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xf7, 0x39, 0xfe, 0x7f, 0x9c, 0x3c, 0x80, 0x00, 0x38, 0x00, 0x3c, 0x00, 0x00, 0x00, 
0x00, 0x0c, 0xf3, 0xbc, 0xff, 0x77, 0x9f, 0x9c, 0x00, 0x00, 0x38, 0x00, 0x3c, 0x00, 0x00, 0x00, 
0x00, 0x1c, 0xf3, 0x9c, 0xff, 0x33, 0xcf, 0x80, 0x00, 0x00, 0x38, 0x00, 0x3c, 0x00, 0x00, 0x00, 
0x00, 0x1e, 0xfb, 0x9c, 0xff, 0x3b, 0xcc, 0x00, 0x00, 0x02, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 
0x00, 0x1e, 0xfb, 0x9c, 0xff, 0x3b, 0xcc, 0x00, 0x00, 0x02, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 
0x00, 0x0e, 0xfb, 0x9c, 0xef, 0x39, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 
0x00, 0x0f, 0x7f, 0x8e, 0x67, 0xb8, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 
0x00, 0x07, 0x7f, 0xce, 0x77, 0x80, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 
0x00, 0x07, 0xef, 0xce, 0x73, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xff, 0xc3, 0xc0, 0x00, 0x00, 
0x00, 0x03, 0xe7, 0xcf, 0x30, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x83, 0xff, 0xc3, 0xfc, 0x00, 0x00, 
0x00, 0x03, 0xe7, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x83, 0xff, 0xc3, 0xfc, 0x00, 0x00, 
0x00, 0x03, 0xf7, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x83, 0xff, 0xc3, 0xfc, 0x00, 0x00, 
0x00, 0x01, 0xf3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc7, 0xff, 0xc3, 0xfe, 0x00, 0x00, 
0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 
0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x87, 0xff, 0xff, 0xff, 0xc3, 0xc0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xff, 0xff, 0xff, 0xc3, 0xc0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xff, 0xff, 0xff, 0xc3, 0xc0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0xff, 0xff, 0xff, 0xc3, 0xc0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0x80, 0x00, 0x03, 0xc3, 0xc0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0x80, 0x00, 0x03, 0xc3, 0xc0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0x80, 0x00, 0x03, 0xc3, 0xc0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x87, 0x80, 0x00, 0x03, 0xc3, 0xc0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x06, 0x08, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x06, 0x08, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc7, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xcf, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xcf, 0xfc, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void setup() {

  Serial.begin(9600);
  pinMode(KNOCK_PIN, INPUT);    
  pinMode(RESET_PIN, INPUT_PULLUP);

  myservo.attach(SERVO_PIN);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  performResetHit();
  
  
}

void loop() {

  if (digitalRead(KNOCK_PIN)) {       // knock detected?
    performNerfHit(); 
  }
  else if (!digitalRead(RESET_PIN)) {    // reset button pressed
    performResetHit();
  }
  
}

void performNerfHit() {
  score++;
  drawBitmap(powPic);
  delay(2000);
  moveServo();
  displayScore(score, 0);
  delay(1000);
  if ( score == MAX_SCORE ) {
    delay(2000); 
    performWinner();
    performResetHit();
  }
}

void performResetHit() {
  displayScore(0,0);
  servoDirection = 0;
  score=0;
  pos = SERVO_TOP;  
  moveServo();
  delay(1000);
}

void performWinner() {
  drawBitmap(winnerPic);
  delay(20000);
}

void moveServo( ) {
 
  if (pos == SERVO_TOP) {
      if ( servoDirection == 0 ) {
         myservo.write(SERVO_TOP);
         pos = SERVO_TOP;
         servoDirection = 1;
      } else if ( servoDirection == -1 ) {
         sweepMove(SERVO_RIGHT);
      } else if ( servoDirection == 1 ) {
         sweepMove(SERVO_LEFT);
      }
  } else {
     sweepMove(SERVO_TOP);
  }
  
}

void sweepMove(servoPositions target) {
  if ( target == SERVO_RIGHT ) {
    for ( pos = pos - 1; pos >= SERVO_RIGHT; pos -= 1) {
      myservo.write(pos);
      delay(15);
    }
    servoDirection = servoDirection * -1;
  } else if ( target == SERVO_LEFT ) {
    for ( pos = pos + 1; pos <= SERVO_LEFT; pos += 1) {
      myservo.write(pos);
      delay(15);
    }
    servoDirection = servoDirection * -1;
  } else if ( target == SERVO_TOP ) {
    while ( pos != SERVO_TOP ) {
      myservo.write(pos);
      delay(15);
      pos += servoDirection;
    }
  }
}

void drawBitmap(const uint8_t *bitmap) {
  display.clearDisplay();

  display.drawBitmap(
    0,
    0,
    bitmap, SCREEN_WIDTH, SCREEN_HEIGHT, 1);
  display.display();
}

void displayScore(int score, int delayMS) {
  display.clearDisplay();
  display.setTextSize(6); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  int offset = score >= 10 ? 35 : 55;
  display.setCursor(offset, 20);
  display.println(score);
  display.display();      // Show initial text
  delay(delayMS);
}
